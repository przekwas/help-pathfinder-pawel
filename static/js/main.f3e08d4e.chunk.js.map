{"version":3,"sources":["utils/count-reducer.js","components/Tile.jsx","components/Row.jsx","App.jsx","utils/make-grid.js","serviceWorker.js","index.js"],"names":["initialCount","incorrect","correct","gameRow","countReducer","state","action","type","Tile","tile","rowDim","setRowDim","whichRow","dispatch","useState","hitOrMiss","setHitOrMiss","clicked","setClicked","onClick","e","Number","target","id","className","Row","tileCount","rest","map","i","key","grid","plusOrMinusOrZero","rows","cols","seed","Math","floor","random","row","Array","fill","push","console","log","makeGrid","App","useReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f3e08d4e.chunk.js","sourcesContent":["export const initialCount = {\r\n\tincorrect: 0,\r\n\tcorrect: 0,\r\n\tgameRow: 0\r\n};\r\n\r\nexport const countReducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'right':\r\n\t\t\treturn { ...state, correct: state.correct + 1, gameRow: state.gameRow + 1 };\r\n\t\tcase 'wrong':\r\n\t\t\treturn { ...state, incorrect: state.incorrect + 1 };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","import React, { useState } from 'react';\r\n\r\nconst Tile = ({ tile, rowDim, setRowDim, gameRow, whichRow, dispatch }) => {\r\n\tconst [hitOrMiss, setHitOrMiss] = useState('');\r\n\tconst [clicked, setClicked] = useState(false);\r\n\r\n\tconst tileClick = e => {\r\n\t\tif (clicked || rowDim || gameRow !== whichRow) return;\r\n\t\tif (Number(e.target.id) === 0) {\r\n\t\t\tsetHitOrMiss('right');\r\n\t\t\tsetRowDim(true);\r\n\t\t\tdispatch({ type: 'right' });\r\n\t\t} else {\r\n\t\t\tsetHitOrMiss('wrong');\r\n\t\t\tdispatch({ type: 'wrong' });\r\n\t\t}\r\n\t\tsetClicked(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tonClick={tileClick}\r\n\t\t\tclassName={`tile-base tile ${hitOrMiss} ${rowDim && 'dim'}`}\r\n\t\t\tid={tile}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default Tile;\r\n","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Tile from './Tile';\r\n\r\nconst Row = ({ tileCount, gameRow, whichRow, ...rest }) => {\r\n\tconst [rowDim, setRowDim] = useState(false);\r\n\r\n\treturn (\r\n\t\t<div className={`row ${gameRow === whichRow && 'current-row'}`}>\r\n\t\t\t{tileCount.map((tile, i) => (\r\n\t\t\t\t<Tile\r\n\t\t\t\t\tkey={`col-${i}`}\r\n\t\t\t\t\ttile={tile}\r\n                    rowDim={rowDim}\r\n                    gameRow={gameRow}\r\n                    whichRow={whichRow}\r\n\t\t\t\t\tsetRowDim={setRowDim}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Row;\r\n","import React, { useReducer, useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { makeGrid } from './utils/make-grid';\r\nimport { countReducer, initialCount } from './utils/count-reducer';\r\n\r\nimport './styles/app.css';\r\nimport Row from './components/Row';\r\n\r\nconst grid = makeGrid({ rows: 10, cols: 10 });\r\n\r\nconst App = () => {\r\n\tconst [state, dispatch] = useReducer(countReducer, initialCount);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"totals\">\r\n\t\t\t\t<h5>\r\n\t\t\t\t\tTotal Correct: <span className=\"correct\">{state.correct}</span>\r\n\t\t\t\t</h5>\r\n\t\t\t\t<h5>Total Guesses: {state.correct + state.incorrect}</h5>\r\n\t\t\t\t<h5>\r\n\t\t\t\t\tTotal Wrong: <span className=\"incorrect\">{state.incorrect}</span>\r\n\t\t\t\t</h5>\r\n\t\t\t</div>\r\n\t\t\t{grid.map((row, i) => (\r\n\t\t\t\t<Row\r\n\t\t\t\t\tkey={`row-${i}`}\r\n\t\t\t\t\twhichRow={i}\r\n\t\t\t\t\tgameRow={state.gameRow}\r\n\t\t\t\t\ttileCount={row}\r\n\t\t\t\t\tdispatch={dispatch}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","export const makeGrid = ({ rows, cols }) => {\r\n\tconst grid = [];\r\n\r\n\tlet plusOrMinusOrZero,\r\n\t\tseed = Math.floor(Math.random() * cols);\r\n\r\n\tfor (let i = 0; i < rows; i++) {\r\n\t\tlet row = Array(cols).fill(1);\r\n\t\tlet random = Math.random();\r\n\r\n\t\tif (random < 0.33) {\r\n\t\t\tplusOrMinusOrZero = -1;\r\n\t\t} else if (random > 0.33 && random < 0.66) {\r\n\t\t\tplusOrMinusOrZero = 0;\r\n\t\t} else if (random > 0.66 && random < 0.99) {\r\n\t\t\tplusOrMinusOrZero = 1;\r\n\t\t}\r\n\r\n\t\tif (i === 0) {\r\n\t\t\trow[seed] = 0;\r\n\t\t\tgrid.push(row);\r\n\t\t} else {\r\n\t\t\tseed += plusOrMinusOrZero;\r\n\r\n\t\t\tif (seed > cols - 1) {\r\n\t\t\t\tlet backOneOrTwo = Math.random() > 0.55 ? -1 : -2;\r\n\t\t\t\tseed += backOneOrTwo;\r\n\t\t\t\tseed--;\r\n\t\t\t} else if (seed < 0) {\r\n\t\t\t\tlet nextOneOrTwo = Math.random() > 0.55 ? 1 : 2;\r\n\t\t\t\tseed += nextOneOrTwo;\r\n\t\t\t}\r\n\r\n\t\t\trow[seed] = 0;\r\n\t\t\tgrid.push(row);\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(grid);\r\n\r\n\treturn grid;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}